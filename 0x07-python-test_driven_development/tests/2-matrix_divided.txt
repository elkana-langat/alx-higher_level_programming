===========================
How to Use 2-matrix_divided
===========================

The module defines a function ``matrix_divided(matrix, div)``

Usage
=====

``matrix_divided(...)`` returns a new matrix after division by ``div``.

::

	>>> matrix_divided = __import__('2-matrix_divided').matrix_divided
	>>> matrix = [
	...	[2, 4, 6],
	...	[8, 10, 12]
	...	]
	>>> print(matrix_divided(matrix, 2))
	[[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]]

::

	>>> matrix = [
	...	[1, 2, 3],
	...	[4, 5, 6]
	...	]
	>>> print(matrix_divided(matrix, 3))
	[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

The original matrix should be unchanged

::

	>>> print(matrix)
	[[1, 2, 3], [4, 5, 6]]

The matrix can be of floating point numbers

::

	>>> matrix = [
	...	[4.2, 8.4, 10.6],
	...	[12.4, 16.2, 18.6]
	...	]
	>>> print(matrix_divided(matrix, 2))
	[[2.1, 4.2, 5.3], [6.2, 8.1, 9.3]]

Invalid Input
=============

Zero Division Error

::

	>>> matrix = [
	...	[1, 2, 3],
	...	[4, 5, 6]
	...	]
	>>> print(matrix_divided(matrix, 0))
	Traceback (most recent call last):
	ZeroDivisionError: division by zero

Not a matrix

::

	>>> matrix = "Elkana Langat"
	>>> print(matrix_divided(matrix, 2))
	Traceback (most recent call last):
	TypeError: matrix must be a matrix (list of lists) of integers/floats

Equal rows

::

	>>> matrix = [
	...	[1, 2, 3],
	...	[5, 6]
	...	]
	>>> print(matrix_divided(matrix, 0))
	Traceback (most recent call last):
	TypeError: Each row of the matrix must have the same size

Not passing all arguments

::

	>>> print(matrix_divided(matrix))
	Traceback (most recent call last):
	TypeError: matrix_divided() missing 1 required positional argument: 'div'

Missing all arguments

::

	>>> print(matrix_divided())
	Traceback (most recent call last):
	TypeError: matrix_divided() missing 2 required positional arguments: 'matrix' and 'div'

Passing an empty matrix

::
	
	>>> matrix = []
	>>> print(matrix_divided(matrix, 2))
	Traceback (most recent call last):
	TypeError: matrix must be a matrix (list of lists) of integers/floats
